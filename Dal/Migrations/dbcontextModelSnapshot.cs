// <auto-generated />
using System;
using Dal.Do;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(dbcontext))]
    partial class dbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dal.Do.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("customerName");

                    b.HasKey("CustomerId")
                        .HasName("PK__customer__B611CB7DC5FAAA13");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Dal.Do.Debt", b =>
                {
                    b.Property<int>("DebtsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("debtsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebtsId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("isPaid");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("notes");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int")
                        .HasColumnName("paymentType");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("saleId");

                    b.Property<int?>("SumOfDebts")
                        .HasColumnType("int")
                        .HasColumnName("sumOfDebts");

                    b.HasKey("DebtsId")
                        .HasName("PK__debts__A8B8A7A2150106E6");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentType");

                    b.HasIndex("SaleId");

                    b.ToTable("debts", (string)null);
                });

            modelBuilder.Entity("Dal.Do.PaymentType", b =>
                {
                    b.Property<int>("PaymentCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentCode");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentCode"));

                    b.Property<string>("TypeOfpayment")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("typeOfpayment");

                    b.HasKey("PaymentCode")
                        .HasName("PK__paymentT__B5D907FA7BC5B257");

                    b.ToTable("paymentType", (string)null);
                });

            modelBuilder.Entity("Dal.Do.RegularCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<bool?>("Activy")
                        .HasColumnType("bit")
                        .HasColumnName("activy");

                    b.Property<string>("Address")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("address");

                    b.Property<string>("DefaultPhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("defaultPhone");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("homePhone");

                    b.Property<string>("Mail")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mail");

                    b.HasKey("CustomerId")
                        .HasName("PK__regularC__B611CB7DC61E679F");

                    b.ToTable("regularCustomer", (string)null);
                });

            modelBuilder.Entity("Dal.Do.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("saleId");

                    b.Property<string>("EventTime")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("eventTime");

                    b.Property<string>("SaleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("saleName");

                    b.HasKey("SaleId")
                        .HasName("PK__sales__FAE8F4F5DFE88E78");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("Dal.Do.Debt", b =>
                {
                    b.HasOne("Dal.Do.Customer", "CustomerIdNavigation")
                        .WithMany("Debts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Dal.Do.PaymentType", "PaymentTypeNavigation")
                        .WithMany("Debts")
                        .HasForeignKey("PaymentType")
                        .HasConstraintName("FK__debts__paymentTy__440B1D61");

                    b.HasOne("Dal.Do.Sale", "Sale")
                        .WithMany("Debts")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK__debts__saleId__4316F928");

                    b.Navigation("CustomerIdNavigation");

                    b.Navigation("PaymentTypeNavigation");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Dal.Do.RegularCustomer", b =>
                {
                    b.HasOne("Dal.Do.Customer", "Customer")
                        .WithOne("RegularCustomer")
                        .HasForeignKey("Dal.Do.RegularCustomer", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__regularCu__custo__3D5E1FD2");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Dal.Do.Customer", b =>
                {
                    b.Navigation("Debts");

                    b.Navigation("RegularCustomer");
                });

            modelBuilder.Entity("Dal.Do.PaymentType", b =>
                {
                    b.Navigation("Debts");
                });

            modelBuilder.Entity("Dal.Do.Sale", b =>
                {
                    b.Navigation("Debts");
                });
#pragma warning restore 612, 618
        }
    }
}
